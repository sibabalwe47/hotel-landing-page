@mixin breakpoint($point) {
  @if $point == xldesktop {
    @media (min-width: 1600px) {
      @content;
    }
  }
  @elseif $point == x-large {
    @media (min-width: 1440px) {
      @content;
    }
  }
  @elseif $point == desktop {
    @media (min-width: 1200px) and (max-width: 1599px) {
      @content;
    }
  } @else if $point == laptop {
    @media (min-width: 992px) and (max-width: 1199px) {
      @content;
    }
  } @else if $point == tablet {
    @media (min-width: 768px) and (max-width: 991px) {
      @content;
    }
  } @else if $point == tabletlandscape {
    @media (min-width: 1024px) and (max-width: 1024px) and (min-height: 768px) and (max-height: 768px) {
      @content;
    }
  } @else if $point == largemobile {
    @media (min-width: 320px) and (max-width: 767px) {
      @content;
    }
  } @else if $point == smallmobile {
    @media (max-width: 319px) {
      @content;
    }
  } @else if $point == mobile {
    @media (max-width: 767px) {
      @content;
    }
  } @else if $point == fixed {
    @media (min-width: 992px) {
      @content;
    }
  }

  @if $point == desktopxldesktop {
    @media (min-width: 1200px) {
      @content;
    }
  } @else if $point == handheld {
    @media (max-width: 991px) {
      @content;
    }
  } @else if $point == notmobile {
    @media (min-width: 768px) {
      @content;
    }
  } @else if $point == smallscreen {
    @media (max-width: 320px) {
      @content;
    }
  }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  -moz-border-radius-topright: $radius;
  -ms-border-radius-topright: $radius;
  border-top-right-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  -moz-border-radius-topleft: $radius;
  -ms-border-radius-topleft: $radius;
  border-top-left-radius: $radius;
}

@mixin border-right-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  -moz-border-radius-topright: $radius;
  -ms-border-radius-topright: $radius;
  border-top-right-radius: $radius;
  -webkit-border-bottom-right-radius: $radius;
  -moz-border-radius-bottomright: $radius;
  -ms-border-radius-bottomright: $radius;
  border-bottom-right-radius: $radius;
}

@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  -moz-border-radius-bottomright: $radius;
  -ms-border-radius-bottomright: $radius;
  border-bottom-right-radius: $radius;
  -webkit-border-bottom-left-radius: $radius;
  -moz-border-radius-bottomleft: $radius;
  -ms-border-radius-bottomleft: $radius;
  border-bottom-left-radius: $radius;
}

@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  -moz-border-radius-bottomleft: $radius;
  -ms-border-radius-bottomleft: $radius;
  border-bottom-left-radius: $radius;
  -webkit-border-top-left-radius: $radius;
  -moz-border-radius-topleft: $radius;
  -ms-border-radius-topleft: $radius;
  border-top-left-radius: $radius;
}

@mixin border-top-right-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  -moz-border-radius-topright: $radius;
  -ms-border-radius-topright: $radius;
  border-top-right-radius: $radius;
}

@mixin border-bottom-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  -moz-border-radius-bottomright: $radius;
  -ms-border-radius-bottomright: $radius;
  border-bottom-right-radius: $radius;
}

@mixin border-bottom-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  -moz-border-radius-bottomleft: $radius;
  -ms-border-radius-bottomleft: $radius;
  border-bottom-left-radius: $radius;
}

@mixin border-top-left-radius($radius) {
  -webkit-border-top-left-radius: $radius;
  -moz-border-radius-topleft: $radius;
  -ms-border-radius-topleft: $radius;
  border-top-left-radius: $radius;
}

@mixin gradient($from, $to) {
  /* fallback/image non-cover color */
  background-color: $from;
  /* Firefox 3.6+ */
  background-image: -moz-linear-gradient($from, $to);
  /* Safari 4+, Chrome 1+ */
  background-image: -webkit-gradient(
    linear,
    0% 0%,
    0% 100%,
    from($from),
    to($to)
  );
  /* Safari 5.1+, Chrome 10+ */
  background-image: -webkit-linear-gradient($from, $to);
  /* Opera 11.10+ */
  background-image: -o-linear-gradient($from, $to);
}

@mixin transition($property, $time) {
  -webkit-transition: $property $time ease-in-out;
  -moz-transition: $property $time ease-in-out;
  -o-transition: $property $time ease-in-out;
  transition: $property $time ease-in-out;
}

@mixin opacity($value) {
  opacity: $value;
  -webkit-opacity: $value;
  -moz-opacity: $value;
  -o-opacity: $value;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }

  @-moz-keyframes #{$animationName} {
    @content;
  }

  @-o-keyframes #{$animationName} {
    @content;
  }

  @keyframes #{$animationName} {
    @content;
  }
}

@mixin animate($name, $duration, $iteration) {
  -webkit-animation-duration: $duration;
  -moz-animation-duration: $duration;
  -o-animation-duration: $duration;
  animation-duration: $duration;
  -webkit-animation-iteration-count: $iteration;
  -moz-animation-iteration-count: $iteration;
  -o-animation-iteration-count: $iteration;
  animation-iteration-count: $iteration;
  -webkit-animation-name: $name;
  -moz-animation-name: $name;
  -o-animation-name: $name;
  animation-name: $name;
}

@mixin skew($x_value, $y_value) {
  -webkit-transform: skew($x_value, $y_value);
  -moz-transform: skew($x_value, $y_value);
  -o-transform: skew($x_value, $y_value);
  -ms-transform: skew($x_value, $y_valueg);
  transform: skew($x_value, $y_value);
}

@mixin fontsize($size) {
  font-size: $size + px;
  font-size: ($size / 10) + rem;
}

@mixin rotate($angle) {
  webkit-transform: rotate($angle);
  -moz-transform: rotate($angle);
  -ms-transform: rotate($angle);
  -o-transform: rotate($angle);
  transform: rotate($angle);
}

@mixin translate($x_value: 0, $y_value: -50%) {
  webkit-transform: translate($x_value, $y_value);
  -moz-transform: translate($x_value, $y_value);
  -ms-transform: translate($x_value, $y_value);
  -o-transform: translate($x_value, $y_value);
  transform: translate($x_value, $y_value);
}

@mixin box-shadow($top, $left, $blur, $size, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $size $color;
    -moz-box-shadow: inset $top $left $blur $size $color;
    box-shadow: inset $top $left $blur $size $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $size $color;
    -moz-box-shadow: $top $left $blur $size $color;
    box-shadow: $top $left $blur $size $color;
  }
}
/* @include box-shadow(1px,1px,1px,0, #fff, true); */
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}
